/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.apache.nutch.storage;  
@SuppressWarnings("all")
public class Link extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Link\",\"namespace\":\"org.apache.nutch.storage\",\"fields\":[{\"name\":\"key\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"score\",\"type\":\"float\",\"default\":0},{\"name\":\"distance\",\"type\":\"int\",\"default\":0},{\"name\":\"batchId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"in\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"out\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    KEY(0, "key"),
    SCORE(1, "score"),
    DISTANCE(2, "distance"),
    BATCH_ID(3, "batchId"),
    IN(4, "in"),
    OUT(5, "out"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "key",
  "score",
  "distance",
  "batchId",
  "in",
  "out",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return Link._ALL_FIELDS.length;
  }

  private java.lang.String key;
  private float score;
  private int distance;
  private java.lang.String batchId;
  private java.lang.String in;
  private java.lang.String out;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return key;
    case 1: return score;
    case 2: return distance;
    case 3: return batchId;
    case 4: return in;
    case 5: return out;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: key = (java.lang.String)(value); break;
    case 1: score = (java.lang.Float)(value); break;
    case 2: distance = (java.lang.Integer)(value); break;
    case 3: batchId = (java.lang.String)(value); break;
    case 4: in = (java.lang.String)(value); break;
    case 5: out = (java.lang.String)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'key' field.
   */
  public java.lang.String getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(java.lang.String value) {
    this.key = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'key' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isKeyDirty(java.lang.String value) {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'score' field.
   */
  public java.lang.Float getScore() {
    return score;
  }

  /**
   * Sets the value of the 'score' field.
   * @param value the value to set.
   */
  public void setScore(java.lang.Float value) {
    this.score = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'score' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isScoreDirty(java.lang.Float value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'distance' field.
   */
  public java.lang.Integer getDistance() {
    return distance;
  }

  /**
   * Sets the value of the 'distance' field.
   * @param value the value to set.
   */
  public void setDistance(java.lang.Integer value) {
    this.distance = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'distance' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isDistanceDirty(java.lang.Integer value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'batchId' field.
   */
  public java.lang.String getBatchId() {
    return batchId;
  }

  /**
   * Sets the value of the 'batchId' field.
   * @param value the value to set.
   */
  public void setBatchId(java.lang.String value) {
    this.batchId = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'batchId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isBatchIdDirty(java.lang.String value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'in' field.
   */
  public java.lang.String getIn() {
    return in;
  }

  /**
   * Sets the value of the 'in' field.
   * @param value the value to set.
   */
  public void setIn(java.lang.String value) {
    this.in = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'in' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isInDirty(java.lang.String value) {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'out' field.
   */
  public java.lang.String getOut() {
    return out;
  }

  /**
   * Sets the value of the 'out' field.
   * @param value the value to set.
   */
  public void setOut(java.lang.String value) {
    this.out = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'out' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isOutDirty(java.lang.String value) {
    return isDirty(5);
  }

  /** Creates a new Link RecordBuilder */
  public static org.apache.nutch.storage.Link.Builder newBuilder() {
    return new org.apache.nutch.storage.Link.Builder();
  }
  
  /** Creates a new Link RecordBuilder by copying an existing Builder */
  public static org.apache.nutch.storage.Link.Builder newBuilder(org.apache.nutch.storage.Link.Builder other) {
    return new org.apache.nutch.storage.Link.Builder(other);
  }
  
  /** Creates a new Link RecordBuilder by copying an existing Link instance */
  public static org.apache.nutch.storage.Link.Builder newBuilder(org.apache.nutch.storage.Link other) {
    return new org.apache.nutch.storage.Link.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for Link instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Link>
    implements org.apache.avro.data.RecordBuilder<Link> {

    private java.lang.String key;
    private float score;
    private int distance;
    private java.lang.String batchId;
    private java.lang.String in;
    private java.lang.String out;

    /** Creates a new Builder */
    private Builder() {
      super(org.apache.nutch.storage.Link.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.apache.nutch.storage.Link.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Link instance */
    private Builder(org.apache.nutch.storage.Link other) {
            super(org.apache.nutch.storage.Link.SCHEMA$);
      if (isValidValue(fields()[0], other.key)) {
        this.key = (java.lang.String) data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.score)) {
        this.score = (java.lang.Float) data().deepCopy(fields()[1].schema(), other.score);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.distance)) {
        this.distance = (java.lang.Integer) data().deepCopy(fields()[2].schema(), other.distance);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.batchId)) {
        this.batchId = (java.lang.String) data().deepCopy(fields()[3].schema(), other.batchId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.in)) {
        this.in = (java.lang.String) data().deepCopy(fields()[4].schema(), other.in);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.out)) {
        this.out = (java.lang.String) data().deepCopy(fields()[5].schema(), other.out);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'key' field */
    public java.lang.String getKey() {
      return key;
    }
    
    /** Sets the value of the 'key' field */
    public org.apache.nutch.storage.Link.Builder setKey(java.lang.String value) {
      validate(fields()[0], value);
      this.key = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'key' field has been set */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'key' field */
    public org.apache.nutch.storage.Link.Builder clearKey() {
      key = null;
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'score' field */
    public java.lang.Float getScore() {
      return score;
    }
    
    /** Sets the value of the 'score' field */
    public org.apache.nutch.storage.Link.Builder setScore(float value) {
      validate(fields()[1], value);
      this.score = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'score' field has been set */
    public boolean hasScore() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'score' field */
    public org.apache.nutch.storage.Link.Builder clearScore() {
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'distance' field */
    public java.lang.Integer getDistance() {
      return distance;
    }
    
    /** Sets the value of the 'distance' field */
    public org.apache.nutch.storage.Link.Builder setDistance(int value) {
      validate(fields()[2], value);
      this.distance = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'distance' field has been set */
    public boolean hasDistance() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'distance' field */
    public org.apache.nutch.storage.Link.Builder clearDistance() {
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'batchId' field */
    public java.lang.String getBatchId() {
      return batchId;
    }
    
    /** Sets the value of the 'batchId' field */
    public org.apache.nutch.storage.Link.Builder setBatchId(java.lang.String value) {
      validate(fields()[3], value);
      this.batchId = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'batchId' field has been set */
    public boolean hasBatchId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'batchId' field */
    public org.apache.nutch.storage.Link.Builder clearBatchId() {
      batchId = null;
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'in' field */
    public java.lang.String getIn() {
      return in;
    }
    
    /** Sets the value of the 'in' field */
    public org.apache.nutch.storage.Link.Builder setIn(java.lang.String value) {
      validate(fields()[4], value);
      this.in = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'in' field has been set */
    public boolean hasIn() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'in' field */
    public org.apache.nutch.storage.Link.Builder clearIn() {
      in = null;
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'out' field */
    public java.lang.String getOut() {
      return out;
    }
    
    /** Sets the value of the 'out' field */
    public org.apache.nutch.storage.Link.Builder setOut(java.lang.String value) {
      validate(fields()[5], value);
      this.out = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'out' field has been set */
    public boolean hasOut() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'out' field */
    public org.apache.nutch.storage.Link.Builder clearOut() {
      out = null;
      fieldSetFlags()[5] = false;
      return this;
    }
    
    @Override
    public Link build() {
      try {
        Link record = new Link();
        record.key = fieldSetFlags()[0] ? this.key : (java.lang.String) defaultValue(fields()[0]);
        record.score = fieldSetFlags()[1] ? this.score : (java.lang.Float) defaultValue(fields()[1]);
        record.distance = fieldSetFlags()[2] ? this.distance : (java.lang.Integer) defaultValue(fields()[2]);
        record.batchId = fieldSetFlags()[3] ? this.batchId : (java.lang.String) defaultValue(fields()[3]);
        record.in = fieldSetFlags()[4] ? this.in : (java.lang.String) defaultValue(fields()[4]);
        record.out = fieldSetFlags()[5] ? this.out : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public Link.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public Link newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends Link implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'key' field.
		   */
	  public java.lang.String getKey() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'key' field.
		   * @param value the value to set.
	   */
	  public void setKey(java.lang.String value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'key' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isKeyDirty(java.lang.String value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'score' field.
		   */
	  public java.lang.Float getScore() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'score' field.
		   * @param value the value to set.
	   */
	  public void setScore(java.lang.Float value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'score' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isScoreDirty(java.lang.Float value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'distance' field.
		   */
	  public java.lang.Integer getDistance() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'distance' field.
		   * @param value the value to set.
	   */
	  public void setDistance(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'distance' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isDistanceDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'batchId' field.
		   */
	  public java.lang.String getBatchId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'batchId' field.
		   * @param value the value to set.
	   */
	  public void setBatchId(java.lang.String value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'batchId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isBatchIdDirty(java.lang.String value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'in' field.
		   */
	  public java.lang.String getIn() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'in' field.
		   * @param value the value to set.
	   */
	  public void setIn(java.lang.String value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'in' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isInDirty(java.lang.String value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'out' field.
		   */
	  public java.lang.String getOut() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'out' field.
		   * @param value the value to set.
	   */
	  public void setOut(java.lang.String value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'out' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isOutDirty(java.lang.String value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

